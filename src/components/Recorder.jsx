import React, { useState, useEffect, useRef } from "react";
import { useSpeechRecognition } from "react-speech-kit";
import MicIcon from "@mui/icons-material/Mic";
import GraphicEqIcon from "@mui/icons-material/GraphicEq";
import Typing from "./Typing";
import StopCircleIcon from "@mui/icons-material/StopCircle";
import { generateImageMessage } from "../utils/generateImage";
import { getChatbotResponse } from "../utils/sendChatMessage";
import { interceptScroll, handleScroll } from "../utils/scrolling";

const Recorder = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [response, setResponse] = useState("");
  const [messages, setMessages] = useState([]);
  const chatBodyRef = useRef(null);
  const [typing, setTyping] = useState([]);
  const [generatedImageUrl, setGeneratedImageUrl] = useState(null);
  const [isSending, setIsSendingMessage] = useState(false);
  const [isChatbotTyping, setIsChatbotTyping] = useState(false);

  const { listen, stop } = useSpeechRecognition({
    onResult: (result) => {
      setTranscript(result);
    },
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (transcript === "") return;
    setTranscript("");
    const newMessage = { from: "user", content: transcript };
    setMessages([...messages, newMessage]);
    setIsSendingMessage(true);

    try {
      if (transcript.includes("generate an image:")) {
        const newImageMessage = await generateImageMessage(transcript);
        if (newImageMessage) {
          setMessages([...messages, newImageMessage]);
          setGeneratedImageUrl(newImageMessage.imageUrl);
          setIsSendingMessage(false);
        }
      } else {
        const { message, trimmedSentences } = await getChatbotResponse(
          transcript
        );
        if (message) {
          setResponse(message);
          setIsChatbotTyping(true);
          let currentIndex = 0;
          const intervalId = setInterval(() => {
            setTyping(trimmedSentences.slice(0, currentIndex + 1));
            currentIndex++;
            if (currentIndex >= trimmedSentences.length) {
              clearInterval(intervalId);
              setIsChatbotTyping(false);
              setIsSendingMessage(false);
            }
          }, 2000);
          const utterance = new SpeechSynthesisUtterance(message);
          utterance.lang = "en-US";
          speechSynthesis.speak(utterance);
          const newMessages = [
            ...messages,
            newMessage,
            { from: "chatgpt", content: message },
          ];
          setMessages(newMessages);
          setGeneratedImageUrl(null);
          setTranscript("");
        }
      }
    } catch (error) {
      console.log(error);
      setIsSendingMessage(false);
    }
  };

  const handleStop = () => {
    speechSynthesis.cancel();
  };

  const startRecording = async () => {
    setIsRecording(true);
    listen();
  };

  const stopRecording = () => {
    setIsRecording(false);
    stop();
  };

  useEffect(() => {
    interceptScroll(
      chatBodyRef,
      typing,
      messages,
      isSending,
      isChatbotTyping,
      setTyping
    );
  }, [typing, messages, isSending, isChatbotTyping]);
  return (
    <div>
      <div className="chat-layout">
        <div className="chat-header">
          <h1>Chat with ChatGPT</h1>
        </div>
        <div className="chat-body" ref={chatBodyRef}>
          {messages.map((message, index) => (
            <div key={index} className={`chat-message from-${message.from}`}>
              <div className="message-content">
                {/* If the message is from the assistant */}
                {message.from === "chatgpt" ? (
                  <>
                    {/* If the message is an image message */}
                    {message.imageUrl ? (
                      <div className="image-message">
                        <img
                          src={message.imageUrl}
                          alt="Generated by DALLE API"
                          style={{ width: "100%", height: "auto" }}
                        />
                        <p>{message.content}</p>
                      </div>
                    ) : (
                      // Otherwise, display the text
                      <Typing message={message.content} />
                    )}
                  </>
                ) : (
                  // If the message is from the user, display the text
                  <p>{message.content}</p>
                )}
              </div>
            </div>
          ))}
        </div>
        <div className="chat-footer">
          <form onSubmit={handleSubmit}>
            <div
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "flex-end",
              }}
            >
              {/* If recording is in progress, show stop recording button, otherwise show microphone button */}
            </div>
            <textarea
              value={transcript}
              onChange={(e) => setTranscript(e.target.value)}
              type="text"
              placeholder="Type your message here"
              className="input-text-area"
              style={{ height: "100%", resize: "none" }}
            />
            <div
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <button disabled={isSending || isChatbotTyping} type="submit">
                Send
              </button>
              {isRecording ? (
                <GraphicEqIcon
                  className="record-icon"
                  style={{ fontSize: "50px" }}
                  onClick={stopRecording}
                />
              ) : (
                <MicIcon
                  style={{ fontSize: "50px" }}
                  onClick={startRecording}
                />
              )}
              {/* Buttons to stop recording and speech synthesis */}
              <StopCircleIcon
                className="stop"
                style={{ marginLeft: "5px", fontSize: "50px" }}
                onClick={handleStop}
              />
              <span>turn off voice assistant</span>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Recorder;
